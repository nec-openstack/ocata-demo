heat_template_version: 2013-05-23

parameters:

  ## Required parameters

  key_name:
    type: string
    default: default

  external_network:
    type: string
    description: uuid/name of a network to use for floating ip addresses
    default: public

  image:
    type: string
    default: ubuntu-docker

  flavor:
    type: string
    default: m1.small

  http_proxy:
    type: string
    default: ""

  https_proxy:
    type: string
    default: ""

  ## Optional parameters

  dns_nameserver:
    type: string
    description: address of a DNS nameserver reachable in your environment
    default: 8.8.8.8

  network_cidr:
    type: string
    description: network range for fixed ip network
    default: 10.0.4.0/24

  wait_condition_timeout:
    type: number
    description: >
      timeout for the Wait Conditions
    default: 6000

resources:

  ## Network resources

  network:
    type: OS::Neutron::Net
    properties:
      name: swarm-net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      name: swarm-subnet
      cidr: {get_param: network_cidr}
      network: {get_resource: network}
      dns_nameservers:
        - {get_param: dns_nameserver}

  extrouter:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  extrouter_inside:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: extrouter}
      subnet: {get_resource: subnet}

  ## Security group

  secgroup_default:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  ## Init

  master_wait_handle:
    type: OS::Heat::WaitConditionHandle

  master_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: swarm_master
    properties:
      handle: {get_resource: master_wait_handle}
      timeout: {get_param: wait_condition_timeout}

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params-manager.yaml}
          params:
            "$MANAGER_IP_PUBLIC": {get_attr: [swarm_master_floating, floating_ip_address]}
            "$MANAGER_IP": {get_attr: [swarm_master_eth0, fixed_ips, 0, ip_address]}
            "$WAIT_CURL": {get_attr: [master_wait_handle, curl_cli]}
            "$HTTP_PROXY": {get_param: http_proxy}
            "$HTTPS_PROXY": {get_param: https_proxy}

  configure_docker:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/00-configure-docker.sh}
          params:
            "$REGISTRY_CONFIG": {get_file: '../docker/registry.yml'}

  install_consul_server:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/00-install-consul-server.sh}
          params:
            "$DEREGISTER_CONFIG": {get_file: '../deregister/config.yaml'}

  install_prometheus:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/50-install-prometheus.sh}
          params:
            "$PROMETHEUS_CONFIG": {get_file: '../prometheus/prometheus.yml'}
            "$PROMETHEUS_ALERT_CONFIG": {get_file: '../prometheus/alert.rules'}
            "$ALERTMANAGER_CONFIG": {get_file: '../alertmanager/alertmanager.yml'}

  install_gitlab:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/70-install-gitlab.sh}
          params:
            "$GITLAB_DOCKER_COMPOSE": {get_file: '../gitlab/docker-compose.yml'}

  master_wc_notify:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/wc-notify-master.sh}

  swarm_master_init:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: write_heat_params}
        - config: {get_resource: configure_docker}
        - config: {get_resource: install_consul_server}
        - config: {get_resource: install_prometheus}
        - config: {get_resource: install_gitlab}
        - config: {get_resource: master_wc_notify}

  ## Server and port

  swarm_master:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: image
      flavor:
        get_param: flavor
      key_name:
        get_param: key_name
      user_data_format: RAW
      user_data: {get_resource: swarm_master_init}
      networks:
        - port:
            get_resource: swarm_master_eth0

  swarm_master_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_resource: network
      security_groups:
        - {get_resource: secgroup_default}
      fixed_ips:
        - subnet_id:
            get_resource: subnet

  swarm_master_floating:
    type: "OS::Neutron::FloatingIP"
    depends_on:
      - extrouter_inside
    properties:
      floating_network:
        get_param: external_network
      port_id:
        get_resource: swarm_master_eth0

outputs:

  floating_ip:
    value: {get_attr: [swarm_master_floating, floating_ip_address]}
    description: >
      This is the "public" ip addresses of Swarm master.

  fixed_ip:
    value: {get_attr: [swarm_master_eth0, fixed_ips, 0, ip_address]}
    description: >
      This is the "private" ip addresses of Swarm master.

  security_group:
    value: { get_resource: secgroup_default }
    description: >
      Security group id

  network:
    value: { get_resource: network }
    description: >
      Fixed network for swarm cluster

  subnet:
    value: { get_resource: subnet }
    description: >
      Fixed subnet for swarm cluster

  swarm_worker_token:
    value: {'Fn::Select': ['worker', { get_attr: [master_wait_condition, data]}]}
    description: >
      Swarm worker tokens to join cluster

  swarm_manager_token:
    value: {'Fn::Select': ['manager', { get_attr: [master_wait_condition, data]}]}
    description: >
      Swarm worker tokens to join cluster
